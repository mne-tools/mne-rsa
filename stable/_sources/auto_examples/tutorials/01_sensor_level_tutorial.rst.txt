
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/tutorials/01_sensor_level_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_tutorials_01_sensor_level_tutorial.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_tutorials_01_sensor_level_tutorial.py:


.. _tut-sensor-level:

Tutorial part 1: RSA on sensor-level MEG data
---------------------------------------------
In this tutorial, we will perform sensor-level RSA analysis on MEG data.

We will explore how representational similarity analysis (RSA) can be used to study the
neural representational code within visual cortex. We will start with performing RSA on
the sensor level data, followed by source level and finally we will perform group level
statistical analysis. Along the way, we will encounter many of the functions and classes
offered by MNE-RSA, which will always be presented in the form of links to the
:ref:`api_documentation` which you are encouraged to explore.

The dataset we will be working with today is the MEG data of the `Wakeman & Nelson
(2015) “faces” dataset <https://www.nature.com/articles/sdata20151>`__. During this
experiment, participants were presented with a series of images, containing:

- Faces of famous people that the participants likely knew
- Faces of people that the participants likely did not know
- Scrambled faces: the images were cut-up and randomly put together again

As a first step, you need to download and extract the dataset: `rsa-data.zip <https://github.com/wmvanvliet/neuroscience_tutorials/releases/download/2/rsa-data.zip>`__.
You can either do this by executing the cell below, or you can do so manually. In any
case, make sure that the ``data_path`` variable points to where you have extracted the
`rsa-data.zip <https://github.com/wmvanvliet/neuroscience_tutorials/releases/download/2/rsa-data.zip>`__
file to.

.. GENERATED FROM PYTHON SOURCE LINES 29-46

.. code-block:: Python

    # ruff: noqa: E402
    # sphinx_gallery_thumbnail_number=8

    import os

    import pooch

    # Download and unzip the data
    pooch.retrieve(
        url="https://github.com/wmvanvliet/neuroscience_tutorials/releases/download/2/rsa-data.zip",
        known_hash="md5:859c0684dd25f8b82d011840725cbef6",
        progressbar=True,
        processor=pooch.Unzip(members=["data"], extract_dir=os.getcwd()),
    )
    # Set this to where you've extracted `rsa-data.zip` to
    data_path = "data"





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|                                              | 0.00/1.41G [00:00<?, ?B/s]      1%|▏                                    | 7.16M/1.41G [00:00<00:19, 71.6MB/s]      1%|▍                                    | 15.8M/1.41G [00:00<00:17, 80.3MB/s]      2%|▋                                    | 24.5M/1.41G [00:00<00:16, 83.2MB/s]      2%|▊                                    | 33.1M/1.41G [00:00<00:16, 84.6MB/s]      3%|█                                    | 41.9M/1.41G [00:00<00:15, 85.6MB/s]      4%|█▎                                   | 50.6M/1.41G [00:00<00:15, 86.0MB/s]      4%|█▌                                   | 59.3M/1.41G [00:00<00:15, 86.5MB/s]      5%|█▊                                   | 68.0M/1.41G [00:00<00:15, 86.4MB/s]      5%|██                                   | 76.6M/1.41G [00:00<00:15, 86.5MB/s]      6%|██▏                                  | 85.4M/1.41G [00:01<00:15, 86.9MB/s]      7%|██▍                                  | 94.2M/1.41G [00:01<00:15, 87.3MB/s]      7%|██▊                                   | 103M/1.41G [00:01<00:14, 87.6MB/s]      8%|███                                   | 112M/1.41G [00:01<00:14, 87.7MB/s]      9%|███▎                                  | 121M/1.41G [00:01<00:14, 87.7MB/s]      9%|███▍                                  | 129M/1.41G [00:01<00:14, 87.7MB/s]     10%|███▋                                  | 138M/1.41G [00:01<00:14, 85.0MB/s]     10%|███▉                                  | 147M/1.41G [00:01<00:15, 83.9MB/s]     11%|████▏                                 | 155M/1.41G [00:01<00:14, 84.8MB/s]     12%|████▍                                 | 164M/1.41G [00:01<00:14, 85.5MB/s]     12%|████▋                                 | 173M/1.41G [00:02<00:14, 86.1MB/s]     13%|████▉                                 | 182M/1.41G [00:02<00:14, 86.5MB/s]     14%|█████▏                                | 190M/1.41G [00:02<00:14, 86.8MB/s]     14%|█████▍                                | 199M/1.41G [00:02<00:13, 87.0MB/s]     15%|█████▌                                | 208M/1.41G [00:02<00:13, 87.2MB/s]     15%|█████▊                                | 217M/1.41G [00:02<00:13, 87.1MB/s]     16%|██████                                | 225M/1.41G [00:02<00:13, 87.2MB/s]     17%|██████▎                               | 234M/1.41G [00:02<00:13, 87.2MB/s]     17%|██████▌                               | 243M/1.41G [00:02<00:13, 85.3MB/s]     18%|██████▊                               | 251M/1.41G [00:02<00:13, 83.9MB/s]     18%|███████                               | 260M/1.41G [00:03<00:13, 82.2MB/s]     19%|███████▏                              | 268M/1.41G [00:03<00:14, 81.1MB/s]     20%|███████▍                              | 276M/1.41G [00:03<00:14, 80.5MB/s]     20%|███████▋                              | 284M/1.41G [00:03<00:13, 80.3MB/s]     21%|███████▉                              | 292M/1.41G [00:03<00:13, 80.2MB/s]     21%|████████                              | 300M/1.41G [00:03<00:13, 80.4MB/s]     22%|████████▎                             | 308M/1.41G [00:03<00:13, 80.3MB/s]     23%|████████▌                             | 316M/1.41G [00:03<00:13, 80.4MB/s]     23%|████████▊                             | 324M/1.41G [00:03<00:13, 80.3MB/s]     24%|████████▉                             | 333M/1.41G [00:03<00:13, 80.6MB/s]     24%|█████████▏                            | 341M/1.41G [00:04<00:13, 80.6MB/s]     25%|█████████▍                            | 349M/1.41G [00:04<00:13, 80.8MB/s]     25%|█████████▋                            | 357M/1.41G [00:04<00:13, 80.7MB/s]     26%|█████████▊                            | 365M/1.41G [00:04<00:12, 80.3MB/s]     27%|██████████                            | 373M/1.41G [00:04<00:12, 80.4MB/s]     27%|██████████▎                           | 381M/1.41G [00:04<00:12, 80.3MB/s]     28%|██████████▌                           | 389M/1.41G [00:04<00:12, 80.3MB/s]     28%|██████████▋                           | 397M/1.41G [00:04<00:12, 80.0MB/s]     29%|██████████▉                           | 405M/1.41G [00:04<00:12, 79.9MB/s]     29%|███████████▏                          | 413M/1.41G [00:04<00:12, 79.8MB/s]     30%|███████████▍                          | 421M/1.41G [00:05<00:12, 80.1MB/s]     31%|███████████▌                          | 429M/1.41G [00:05<00:12, 79.9MB/s]     31%|███████████▊                          | 437M/1.41G [00:05<00:12, 80.0MB/s]     32%|████████████                          | 445M/1.41G [00:05<00:11, 80.0MB/s]     32%|████████████▎                         | 453M/1.41G [00:05<00:11, 80.2MB/s]     33%|████████████▍                         | 461M/1.41G [00:05<00:11, 80.2MB/s]     33%|████████████▋                         | 469M/1.41G [00:05<00:11, 79.5MB/s]     34%|████████████▉                         | 477M/1.41G [00:05<00:11, 79.5MB/s]     35%|█████████████                         | 485M/1.41G [00:05<00:11, 79.4MB/s]     35%|█████████████▎                        | 493M/1.41G [00:05<00:11, 79.3MB/s]     36%|█████████████▌                        | 501M/1.41G [00:06<00:11, 79.6MB/s]     36%|█████████████▊                        | 509M/1.41G [00:06<00:11, 80.4MB/s]     37%|█████████████▉                        | 517M/1.41G [00:06<00:11, 80.1MB/s]     37%|██████████████▏                       | 525M/1.41G [00:06<00:10, 80.3MB/s]     38%|██████████████▍                       | 534M/1.41G [00:06<00:10, 80.4MB/s]     39%|██████████████▋                       | 542M/1.41G [00:06<00:10, 80.6MB/s]     39%|██████████████▊                       | 550M/1.41G [00:06<00:10, 80.9MB/s]     40%|███████████████                       | 558M/1.41G [00:06<00:10, 80.6MB/s]     40%|███████████████▎                      | 566M/1.41G [00:06<00:10, 79.7MB/s]     41%|███████████████▌                      | 574M/1.41G [00:06<00:10, 79.8MB/s]     41%|███████████████▋                      | 582M/1.41G [00:07<00:10, 80.3MB/s]     42%|███████████████▉                      | 590M/1.41G [00:07<00:10, 80.6MB/s]     43%|████████████████▏                     | 598M/1.41G [00:07<00:10, 80.3MB/s]     43%|████████████████▍                     | 606M/1.41G [00:07<00:09, 80.4MB/s]     44%|████████████████▌                     | 614M/1.41G [00:07<00:09, 80.5MB/s]     44%|████████████████▊                     | 623M/1.41G [00:07<00:09, 80.7MB/s]     45%|█████████████████                     | 631M/1.41G [00:07<00:09, 81.1MB/s]     45%|█████████████████▎                    | 639M/1.41G [00:07<00:09, 80.8MB/s]     46%|█████████████████▍                    | 647M/1.41G [00:07<00:09, 80.4MB/s]     47%|█████████████████▋                    | 655M/1.41G [00:07<00:09, 80.2MB/s]     47%|█████████████████▉                    | 663M/1.41G [00:08<00:09, 80.6MB/s]     48%|██████████████████▏                   | 671M/1.41G [00:08<00:09, 80.4MB/s]     48%|██████████████████▎                   | 679M/1.41G [00:08<00:09, 80.5MB/s]     49%|██████████████████▌                   | 687M/1.41G [00:08<00:08, 80.1MB/s]     49%|██████████████████▊                   | 695M/1.41G [00:08<00:08, 80.0MB/s]     50%|███████████████████                   | 703M/1.41G [00:08<00:08, 80.1MB/s]     51%|███████████████████▏                  | 711M/1.41G [00:08<00:08, 80.1MB/s]     51%|███████████████████▍                  | 719M/1.41G [00:08<00:08, 80.5MB/s]     52%|███████████████████▋                  | 728M/1.41G [00:08<00:08, 80.1MB/s]     52%|███████████████████▉                  | 736M/1.41G [00:08<00:08, 80.3MB/s]     53%|████████████████████                  | 744M/1.41G [00:09<00:08, 80.4MB/s]     53%|████████████████████▎                 | 752M/1.41G [00:09<00:08, 80.0MB/s]     54%|████████████████████▌                 | 760M/1.41G [00:09<00:08, 80.0MB/s]     55%|████████████████████▊                 | 768M/1.41G [00:09<00:08, 79.6MB/s]     55%|████████████████████▉                 | 776M/1.41G [00:09<00:07, 79.3MB/s]     56%|█████████████████████▏                | 784M/1.41G [00:09<00:07, 79.2MB/s]     56%|█████████████████████▍                | 792M/1.41G [00:09<00:07, 79.6MB/s]     57%|█████████████████████▌                | 800M/1.41G [00:09<00:07, 79.8MB/s]     57%|█████████████████████▊                | 808M/1.41G [00:09<00:07, 79.8MB/s]     58%|██████████████████████                | 816M/1.41G [00:09<00:07, 80.1MB/s]     59%|██████████████████████▎               | 824M/1.41G [00:10<00:07, 80.6MB/s]     59%|██████████████████████▍               | 832M/1.41G [00:10<00:07, 80.8MB/s]     60%|██████████████████████▋               | 840M/1.41G [00:10<00:07, 80.8MB/s]     60%|██████████████████████▉               | 848M/1.41G [00:10<00:06, 80.6MB/s]     61%|███████████████████████▏              | 856M/1.41G [00:10<00:06, 80.9MB/s]     62%|███████████████████████▎              | 864M/1.41G [00:10<00:06, 80.8MB/s]     62%|███████████████████████▌              | 873M/1.41G [00:10<00:06, 80.8MB/s]     63%|███████████████████████▊              | 881M/1.41G [00:10<00:06, 80.6MB/s]     63%|████████████████████████              | 889M/1.41G [00:10<00:06, 80.3MB/s]     64%|████████████████████████▏             | 897M/1.41G [00:10<00:06, 79.6MB/s]     64%|████████████████████████▍             | 905M/1.41G [00:11<00:06, 79.3MB/s]     65%|████████████████████████▋             | 913M/1.41G [00:11<00:06, 78.9MB/s]     65%|████████████████████████▉             | 921M/1.41G [00:11<00:06, 78.2MB/s]     66%|█████████████████████████             | 928M/1.41G [00:11<00:06, 78.3MB/s]     67%|█████████████████████████▎            | 936M/1.41G [00:11<00:05, 78.5MB/s]     67%|█████████████████████████▌            | 944M/1.41G [00:11<00:05, 78.3MB/s]     68%|█████████████████████████▋            | 952M/1.41G [00:11<00:05, 78.0MB/s]     68%|█████████████████████████▉            | 960M/1.41G [00:11<00:05, 78.0MB/s]     69%|██████████████████████████▏           | 968M/1.41G [00:11<00:05, 77.8MB/s]     69%|██████████████████████████▎           | 975M/1.41G [00:12<00:05, 75.0MB/s]     70%|██████████████████████████▌           | 983M/1.41G [00:12<00:05, 75.0MB/s]     70%|██████████████████████████▊           | 991M/1.41G [00:12<00:05, 76.0MB/s]     71%|██████████████████████████▉           | 999M/1.41G [00:12<00:05, 76.8MB/s]     72%|██████████████████████████▍          | 1.01G/1.41G [00:12<00:05, 77.1MB/s]     72%|██████████████████████████▋          | 1.01G/1.41G [00:12<00:05, 77.6MB/s]     73%|██████████████████████████▉          | 1.02G/1.41G [00:12<00:04, 77.8MB/s]     73%|███████████████████████████          | 1.03G/1.41G [00:12<00:04, 78.4MB/s]     74%|███████████████████████████▎         | 1.04G/1.41G [00:12<00:04, 78.8MB/s]     74%|███████████████████████████▌         | 1.05G/1.41G [00:12<00:04, 78.8MB/s]     75%|███████████████████████████▋         | 1.05G/1.41G [00:13<00:04, 78.5MB/s]     76%|███████████████████████████▉         | 1.06G/1.41G [00:13<00:04, 78.7MB/s]     76%|████████████████████████████▏        | 1.07G/1.41G [00:13<00:04, 78.5MB/s]     77%|████████████████████████████▎        | 1.08G/1.41G [00:13<00:04, 78.0MB/s]     77%|████████████████████████████▌        | 1.09G/1.41G [00:13<00:04, 78.1MB/s]     78%|████████████████████████████▊        | 1.09G/1.41G [00:13<00:03, 78.4MB/s]     78%|████████████████████████████▉        | 1.10G/1.41G [00:13<00:03, 78.5MB/s]     79%|█████████████████████████████▏       | 1.11G/1.41G [00:13<00:03, 78.5MB/s]     79%|█████████████████████████████▍       | 1.12G/1.41G [00:13<00:03, 78.6MB/s]     80%|█████████████████████████████▌       | 1.12G/1.41G [00:13<00:03, 77.4MB/s]     81%|█████████████████████████████▊       | 1.13G/1.41G [00:14<00:03, 77.5MB/s]     81%|██████████████████████████████       | 1.14G/1.41G [00:14<00:03, 77.5MB/s]     82%|██████████████████████████████▏      | 1.15G/1.41G [00:14<00:03, 77.6MB/s]     82%|██████████████████████████████▍      | 1.16G/1.41G [00:14<00:03, 77.9MB/s]     83%|██████████████████████████████▋      | 1.16G/1.41G [00:14<00:03, 78.3MB/s]     83%|██████████████████████████████▊      | 1.17G/1.41G [00:14<00:02, 78.2MB/s]     84%|███████████████████████████████      | 1.18G/1.41G [00:14<00:02, 77.8MB/s]     84%|███████████████████████████████▏     | 1.19G/1.41G [00:14<00:02, 77.6MB/s]     85%|███████████████████████████████▍     | 1.19G/1.41G [00:14<00:02, 78.0MB/s]     86%|███████████████████████████████▋     | 1.20G/1.41G [00:14<00:02, 78.1MB/s]     86%|███████████████████████████████▊     | 1.21G/1.41G [00:15<00:02, 78.1MB/s]     87%|████████████████████████████████     | 1.22G/1.41G [00:15<00:02, 78.0MB/s]     87%|████████████████████████████████▎    | 1.23G/1.41G [00:15<00:02, 78.1MB/s]     88%|████████████████████████████████▍    | 1.23G/1.41G [00:15<00:02, 78.3MB/s]     88%|████████████████████████████████▋    | 1.24G/1.41G [00:15<00:02, 78.3MB/s]     89%|████████████████████████████████▉    | 1.25G/1.41G [00:15<00:01, 78.5MB/s]     89%|█████████████████████████████████    | 1.26G/1.41G [00:15<00:01, 78.2MB/s]     90%|█████████████████████████████████▎   | 1.27G/1.41G [00:15<00:01, 78.5MB/s]     91%|█████████████████████████████████▌   | 1.27G/1.41G [00:15<00:01, 78.5MB/s]     91%|█████████████████████████████████▋   | 1.28G/1.41G [00:15<00:01, 78.8MB/s]     92%|█████████████████████████████████▉   | 1.29G/1.41G [00:16<00:01, 78.3MB/s]     92%|██████████████████████████████████▏  | 1.30G/1.41G [00:16<00:01, 78.6MB/s]     93%|██████████████████████████████████▎  | 1.31G/1.41G [00:16<00:01, 78.5MB/s]     93%|██████████████████████████████████▌  | 1.31G/1.41G [00:16<00:01, 78.4MB/s]     94%|██████████████████████████████████▊  | 1.32G/1.41G [00:16<00:01, 78.4MB/s]     95%|██████████████████████████████████▉  | 1.33G/1.41G [00:16<00:00, 78.6MB/s]     95%|███████████████████████████████████▏ | 1.34G/1.41G [00:16<00:00, 78.2MB/s]     96%|███████████████████████████████████▍ | 1.34G/1.41G [00:16<00:00, 78.0MB/s]     96%|███████████████████████████████████▌ | 1.35G/1.41G [00:16<00:00, 78.3MB/s]     97%|███████████████████████████████████▊ | 1.36G/1.41G [00:16<00:00, 78.7MB/s]     97%|████████████████████████████████████ | 1.37G/1.41G [00:17<00:00, 78.2MB/s]     98%|████████████████████████████████████▏| 1.38G/1.41G [00:17<00:00, 78.4MB/s]     98%|████████████████████████████████████▍| 1.38G/1.41G [00:17<00:00, 78.6MB/s]     99%|████████████████████████████████████▋| 1.39G/1.41G [00:17<00:00, 78.7MB/s]    100%|████████████████████████████████████▊| 1.40G/1.41G [00:17<00:00, 78.8MB/s]      0%|                                              | 0.00/1.41G [00:00<?, ?B/s]    100%|█████████████████████████████████████| 1.41G/1.41G [00:00<00:00, 6.57TB/s]




.. GENERATED FROM PYTHON SOURCE LINES 47-53

A representational code for the stimuli
---------------------------------------

Let’s start by taking a look at the stimuli that were presented during the experiment.
They reside in the ``stimuli`` folder for you as ``.bmp`` image files. The Python
Imaging Library (PIL) can open them and we can use matplotlib to display them.

.. GENERATED FROM PYTHON SOURCE LINES 53-71

.. code-block:: Python


    import matplotlib.pyplot as plt
    from PIL import Image

    # Show the first "famous" face and the first "scrambled" face
    img_famous = Image.open(f"{data_path}/stimuli/f001.bmp")
    img_scrambled = Image.open(f"{data_path}/stimuli/s001.bmp")

    fig, axes = plt.subplots(1, 2, figsize=(10, 5))
    axes[0].imshow(img_famous, cmap="gray")
    axes[0].set_title(f"Famous face: {img_famous.width} x {img_famous.height} pixels")
    axes[1].imshow(img_scrambled, cmap="gray")
    axes[1].set_title(
        f"Scrambled face: {img_scrambled.width} x {img_scrambled.height} pixels"
    )
    axes[0].axis("off")
    axes[1].axis("off")




.. image-sg:: /auto_examples/tutorials/images/sphx_glr_01_sensor_level_tutorial_001.png
   :alt: Famous face: 128 x 162 pixels, Scrambled face: 128 x 162 pixels
   :srcset: /auto_examples/tutorials/images/sphx_glr_01_sensor_level_tutorial_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (np.float64(-0.5), np.float64(127.5), np.float64(161.5), np.float64(-0.5))



.. GENERATED FROM PYTHON SOURCE LINES 72-77

Loaded like this, the stimuli are in a representational space defined by their pixels.
Each image is represented by 128 x 162 = 20736 values between 0 (black) and 255
(white). Let's create a Representational Dissimilarity Matrix (RDM) where images are
compared based on the difference between their pixels. To get the pixels of an image,
you can convert it to a NumPy array like this:

.. GENERATED FROM PYTHON SOURCE LINES 77-86

.. code-block:: Python


    import numpy as np

    pixels_famous = np.array(img_famous)
    pixels_scrambled = np.array(img_scrambled)

    print("Shape of the pixel array for the famous face:", pixels_famous.shape)
    print("Shape of the pixel array for the scrambled face:", pixels_scrambled.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Shape of the pixel array for the famous face: (162, 128)
    Shape of the pixel array for the scrambled face: (162, 128)




.. GENERATED FROM PYTHON SOURCE LINES 87-93

We can now compute the “dissimilarity” between the two images, based on their pixels.
For this, we need to decide on a metric to use. The default metric used in the
original publication (`Kiegeskorte et al. 2008 <https://www.frontiersin.org/articles/10.3389/neuro.06.004.2008/full>`__)
was Pearson Correlation, so let’s use that. Of course, correlation is a
metric of similarity and we want a metric of *dis*\ similarity. Let’s make it easy on
ourselves and just do :math:`1 - r`.

.. GENERATED FROM PYTHON SOURCE LINES 93-103

.. code-block:: Python


    from scipy.stats import pearsonr

    similarity, _ = pearsonr(pixels_famous.flatten(), pixels_scrambled.flatten())
    dissimilarity = 1 - similarity
    print(
        "The dissimilarity between the pixels of the famous and scrambled faces is:",
        dissimilarity,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The dissimilarity between the pixels of the famous and scrambled faces is: 0.4176835093510478




.. GENERATED FROM PYTHON SOURCE LINES 104-108

To construct the full RDM, we need to do this for all pairs of images. In the cell
below, we make a list of all image files and load all of them (there are 450), convert
them to NumPy arrays and concatenate them all together in a single big array called
``pixels`` of shape ``n_images x width x height``.

.. GENERATED FROM PYTHON SOURCE LINES 108-117

.. code-block:: Python


    from glob import glob

    files = sorted(glob(f"{data_path}/stimuli/*.bmp"))
    print(f"There are {len(files)} images to read.")

    pixels = np.array([np.array(Image.open(f)) for f in files])
    print("The dimensions of the `pixel` array are:", pixels.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    There are 450 images to read.
    The dimensions of the `pixel` array are: (450, 162, 128)




.. GENERATED FROM PYTHON SOURCE LINES 118-128

Your first RDM
--------------

Now that you have all the images loaded in, computing the pairwise dissimilarities is
a matter of looping over them and computing correlations. We could do this manually,
but we can make our life a lot easier by using MNE-RSA’s :func:`mne_rsa.compute_rdm`
function. It wants the big matrix as input and also takes a ``metric`` parameter to
select which dissimilarity metric to use. Setting it to ``metric="correlation"``,
which is also the default by the way, will make it use (1 - Pearson correlation) as a
metric like we did manually above.

.. GENERATED FROM PYTHON SOURCE LINES 128-133

.. code-block:: Python


    from mne_rsa import compute_rdm, plot_rdms

    pixel_rdm = compute_rdm(pixels)
    plot_rdms(pixel_rdm, names="pixels")



.. image-sg:: /auto_examples/tutorials/images/sphx_glr_01_sensor_level_tutorial_002.png
   :alt: pixels
   :srcset: /auto_examples/tutorials/images/sphx_glr_01_sensor_level_tutorial_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 200x200 with 2 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 134-150

Staring deeply into this RDM will reveal to you which images belonged to the
“scrambled faces” class, as those pixels are quite different from the actual faces and
each other. We also see that for some reason, the famous faces are a little more alike
than the unknown faces.

The RDM is symmetric along the diagonal, which is all zeros. Take a moment to ponder
why that would be.

.. note::
   The :func:`mne_rsa.compute_rdm` function is a wrapper around
   :func:`scipy.spatial.distance.pdist`. This means that all the metrics supported by
   :func:`~scipy.spatial.distance.pdist` are also valid for
   :func:`mne_rsa.compute_rdm`. This also means that in MNE-RSA, the native format for
   an RDM is the so-called "condensed" form. Since RDMs are symmetric, only the upper
   triangle is stored. The :func:`scipy.spatial.distance.squareform` function can be
   used to go from a square matrix to its condensed form and back.

.. GENERATED FROM PYTHON SOURCE LINES 152-162

Your second RDM
---------------

There are many sensible representations possible for images. One intriguing one is to
create them using convolutional neural networks (CNNs). For example, there is the
`FaceNet <https://github.com/davidsandberg/facenet>`__ model by `Schroff et al. (2015)
<http://arxiv.org/abs/1503.03832>`__ that can generate high-level representations,
such that different photos of the same face have similar representations. I have run
the stimulus images through FaceNet and recorded the generated embeddings for you to
use:

.. GENERATED FROM PYTHON SOURCE LINES 162-173

.. code-block:: Python


    store = np.load(f"{data_path}/stimuli/facenet_embeddings.npz")
    filenames = store["filenames"]
    embeddings = store["embeddings"]
    print(
        "For each of the 450 images, the embedding is a vector of length 512:",
        embeddings.shape,
    )

    facenet_rdm = compute_rdm(embeddings)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    For each of the 450 images, the embedding is a vector of length 512: (450, 512)




.. GENERATED FROM PYTHON SOURCE LINES 174-175

Lets plot both RDMs side-by-side:

.. GENERATED FROM PYTHON SOURCE LINES 175-176

.. code-block:: Python

    plot_rdms([pixel_rdm, facenet_rdm], names=["pixels", "facenet"])



.. image-sg:: /auto_examples/tutorials/images/sphx_glr_01_sensor_level_tutorial_003.png
   :alt: pixels, facenet
   :srcset: /auto_examples/tutorials/images/sphx_glr_01_sensor_level_tutorial_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 400x200 with 3 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 177-183

A look at the brain data
------------------------

We’ve seen how we can create RDMs using properties of the images or embeddings
generated by a model. Now it’s time to see how we create RDMs based on the MEG data.
For that, we first load the epochs from a single participant.

.. GENERATED FROM PYTHON SOURCE LINES 183-189

.. code-block:: Python


    import mne

    epochs = mne.read_epochs(f"{data_path}/sub-02/sub-02-epo.fif")
    epochs






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <script type="text/javascript">
        // must be `var` (not `const`) because this can get embedded multiple times on a page
    var toggleVisibility = (className) => {

        const elements = document.querySelectorAll(`.${className}`);

        elements.forEach(element => {
            if (element.classList.contains("mne-repr-section-header")) {
                return  // Don't collapse the section header row
            }
            element.classList.toggle("mne-repr-collapsed");
        });

        // trigger caret to rotate
        var sel = `.mne-repr-section-header.${className} > th.mne-repr-section-toggle > button`;
        const button = document.querySelector(sel);
        button.classList.toggle("collapsed");

        // adjust tooltip
        sel = `tr.mne-repr-section-header.${className}`;
        const secHeadRow = document.querySelector(sel);
        secHeadRow.classList.toggle("collapsed");
        secHeadRow.title = secHeadRow.title === "Hide section" ? "Show section" : "Hide section";
    }
    </script>

    <style type="text/css">
        /*
    Styles in this section apply both to the sphinx-built website docs and to notebooks
    rendered in an IDE or in Jupyter. In our web docs, styles here are complemented by
    doc/_static/styles.css and other CSS files (e.g. from the sphinx theme, sphinx-gallery,
    or bootstrap). In IDEs/Jupyter, those style files are unavailable, so only the rules in
    this file apply (plus whatever default styling the IDE applies).
    */
    .mne-repr-table {
        display: inline;  /* prevent using full container width */
    }
    .mne-repr-table tr.mne-repr-section-header > th {
        padding-top: 1rem;
        text-align: left;
        vertical-align: middle;
    }
    .mne-repr-section-toggle > button {
        all: unset;
        display: block;
        height: 1rem;
        width: 1rem;
    }
    .mne-repr-section-toggle > button > svg {
        height: 60%;
    }

    /* transition (rotation) effects on the collapser button */
    .mne-repr-section-toggle > button.collapsed > svg {
        transition: 0.1s ease-out;
        transform: rotate(-90deg);
    }
    .mne-repr-section-toggle > button:not(.collapsed) > svg {
        transition: 0.1s ease-out;
        transform: rotate(0deg);
    }

    /* hide collapsed table rows */
    .mne-repr-collapsed {
        display: none;
    }


    @layer {
        /*
        Selectors in a `@layer` will always be lower-precedence than selectors outside the
        layer. So even though e.g. `div.output_html` is present in the sphinx-rendered
        website docs, the styles here won't take effect there as long as some other rule
        somewhere in the page's CSS targets the same element.

        In IDEs or Jupyter notebooks, though, the CSS files from the sphinx theme,
        sphinx-gallery, and bootstrap are unavailable, so these styles will apply.

        Notes:

        - the selector `.accordion-body` is for MNE Reports
        - the selector `.output_html` is for VSCode's notebook interface
        - the selector `.jp-RenderedHTML` is for Jupyter notebook
        - variables starting with `--theme-` are VSCode-specific.
        - variables starting with `--jp-` are Jupyter styles, *some of which* are also
          available in VSCode. Here we try the `--theme-` variable first, then fall back to
          the `--jp-` ones.
        */
        .mne-repr-table {
            --mne-toggle-color: var(--theme-foreground, var(--jp-ui-font-color1));
            --mne-button-bg-color: var(--theme-button-background, var(--jp-info-color0, var(--jp-content-link-color)));
            --mne-button-fg-color: var(--theme-button-foreground, var(--jp-ui-inverse-font-color0, var(--jp-editor-background)));
            --mne-button-hover-bg-color: var(--theme-button-hover-background, var(--jp-info-color1));
            --mne-button-radius: var(--jp-border-radius, 0.25rem);
        }
        /* chevron position/alignment; in VSCode it looks ok without adjusting */
        .accordion-body .mne-repr-section-toggle > button,
        .jp-RenderedHTML .mne-repr-section-toggle > button {
            padding: 0 0 45% 25% !important;
        }
        /* chevron color; MNE Report doesn't have light/dark mode */
        div.output_html .mne-repr-section-toggle > button > svg > path,
        .jp-RenderedHTML .mne-repr-section-toggle > button > svg > path {
            fill: var(--mne-toggle-color);
        }
        .accordion-body .mne-ch-names-btn,
        div.output_html .mne-ch-names-btn,
        .jp-RenderedHTML .mne-ch-names-btn {
            -webkit-border-radius: var(--mne-button-radius);
            -moz-border-radius: var(--mne-button-radius);
            border-radius: var(--mne-button-radius);
            border: none;
            background-image: none;
            background-color: var(--mne-button-bg-color);
            color: var(--mne-button-fg-color);
            font-size: inherit;
            min-width: 1.5rem;
            padding: 0.25rem;
            text-align: center;
            text-decoration: none;
        }
        .accordion-body .mne-ch-names-btn:hover,
        div.output_html .mne.ch-names-btn:hover,
        .jp-RenderedHTML .mne-ch-names-btn:hover {
            background-color: var(--mne-button-hover-bg-color);
            text-decoration: underline;
        }
        .accordion-body .mne-ch-names-btn:focus-visible,
        div.output_html .mne-ch-names-btn:focus-visible,
        .jp-RenderedHTML .mne-ch-names-btn:focus-visible {
            outline: 0.1875rem solid var(--mne-button-bg-color) !important;
            outline-offset: 0.1875rem !important;
        }
    }
    </style>



    <table class="table mne-repr-table">
    







    <tr class="mne-repr-section-header general-98b9d1fb-c071-47e7-b489-f8184381f79d"
         title="Hide section" 
        onclick="toggleVisibility('general-98b9d1fb-c071-47e7-b489-f8184381f79d')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>General</strong>
        </th>
    </tr>


    <tr class="repr-element general-98b9d1fb-c071-47e7-b489-f8184381f79d ">
        <td class="mne-repr-section-toggle"></td>
        <td>Filename(s)</td>
        <td>
        
            sub-02-epo.fif
        
        
        </td>
    </tr>

    <tr class="repr-element general-98b9d1fb-c071-47e7-b489-f8184381f79d ">
        <td class="mne-repr-section-toggle"></td>
        <td>MNE object type</td>
        <td>EpochsFIF</td>
    </tr>
    <tr class="repr-element general-98b9d1fb-c071-47e7-b489-f8184381f79d ">
        <td class="mne-repr-section-toggle"></td>
        <td>Measurement date</td>
    
        <td>2009-04-09 at 11:04:14 UTC</td>
    
    </tr>
    <tr class="repr-element general-98b9d1fb-c071-47e7-b489-f8184381f79d ">
        <td class="mne-repr-section-toggle"></td>
        <td>Participant</td>
    
    
    
    </tr>
    <tr class="repr-element general-98b9d1fb-c071-47e7-b489-f8184381f79d ">
        <td class="mne-repr-section-toggle"></td>
        <td>Experimenter</td>
    
        <td>MEG</td>
    
    </tr>
    







    <tr class="mne-repr-section-header acquisition-3869badb-257b-4285-a642-7a97cd980289"
         title="Hide section" 
        onclick="toggleVisibility('acquisition-3869badb-257b-4285-a642-7a97cd980289')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>Acquisition</strong>
        </th>
    </tr>





    <tr class="repr-element acquisition-3869badb-257b-4285-a642-7a97cd980289 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Total number of events</td>
        <td>879</td>
    </tr>


    <tr class="repr-element acquisition-3869badb-257b-4285-a642-7a97cd980289 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Events counts</td>
    
        <td>
        
            face/famous/first: 147
            <br />
        
            face/famous/immediate: 78
            <br />
        
            face/famous/long: 66
            <br />
        
            face/unfamiliar/first: 149
            <br />
        
            face/unfamiliar/immediate: 65
            <br />
        
            face/unfamiliar/long: 79
            <br />
        
            scrambled/first: 150
            <br />
        
            scrambled/immediate: 71
            <br />
        
            scrambled/long: 74
        
        
        </td>
    
    </tr>


    <tr class="repr-element acquisition-3869badb-257b-4285-a642-7a97cd980289 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Time range</td>
        <td>-0.200 – 2.900 s</td>
    </tr>


    <tr class="repr-element acquisition-3869badb-257b-4285-a642-7a97cd980289 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Baseline</td>
        <td>-0.200 – 0.000 s</td>
    </tr>


    <tr class="repr-element acquisition-3869badb-257b-4285-a642-7a97cd980289 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Sampling frequency</td>
        <td>220.00 Hz</td>
    </tr>


    <tr class="repr-element acquisition-3869badb-257b-4285-a642-7a97cd980289 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Time points</td>
        <td>683</td>
    </tr>


    <tr class="repr-element acquisition-3869badb-257b-4285-a642-7a97cd980289 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Metadata</td>
        <td>879 rows × 2 columns</td>
    </tr>

    







    <tr class="mne-repr-section-header channels-cbff648c-c66e-48c9-8e9a-5865e807137e"
         title="Hide section" 
        onclick="toggleVisibility('channels-cbff648c-c66e-48c9-8e9a-5865e807137e')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>Channels</strong>
        </th>
    </tr>


    
    <tr class="repr-element channels-cbff648c-c66e-48c9-8e9a-5865e807137e ">
        <td class="mne-repr-section-toggle"></td>
        <td>Magnetometers</td>
        <td>
            <button class="mne-ch-names-btn sd-sphinx-override sd-btn sd-btn-info sd-text-wrap sd-shadow-sm" onclick="alert('Good Magnetometers:\n\nMEG0111, MEG0121, MEG0131, MEG0141, MEG0211, MEG0221, MEG0231, MEG0241, MEG0311, MEG0321, MEG0331, MEG0341, MEG0411, MEG0421, MEG0431, MEG0441, MEG0511, MEG0521, MEG0531, MEG0541, MEG0611, MEG0621, MEG0631, MEG0641, MEG0711, MEG0721, MEG0731, MEG0741, MEG0811, MEG0821, MEG0911, MEG0921, MEG0931, MEG0941, MEG1011, MEG1021, MEG1031, MEG1041, MEG1111, MEG1121, MEG1131, MEG1141, MEG1211, MEG1221, MEG1231, MEG1241, MEG1311, MEG1321, MEG1331, MEG1341, MEG1411, MEG1421, MEG1431, MEG1441, MEG1511, MEG1521, MEG1531, MEG1541, MEG1611, MEG1621, MEG1631, MEG1641, MEG1711, MEG1721, MEG1731, MEG1741, MEG1811, MEG1821, MEG1831, MEG1841, MEG1911, MEG1921, MEG1931, MEG1941, MEG2011, MEG2021, MEG2031, MEG2041, MEG2111, MEG2121, MEG2131, MEG2141, MEG2211, MEG2221, MEG2231, MEG2241, MEG2311, MEG2321, MEG2331, MEG2341, MEG2411, MEG2421, MEG2431, MEG2441, MEG2511, MEG2521, MEG2531, MEG2541, MEG2611, MEG2621, MEG2631, MEG2641')" title="(Click to open in popup)&#13;&#13;MEG0111, MEG0121, MEG0131, MEG0141, MEG0211, MEG0221, MEG0231, MEG0241, MEG0311, MEG0321, MEG0331, MEG0341, MEG0411, MEG0421, MEG0431, MEG0441, MEG0511, MEG0521, MEG0531, MEG0541, MEG0611, MEG0621, MEG0631, MEG0641, MEG0711, MEG0721, MEG0731, MEG0741, MEG0811, MEG0821, MEG0911, MEG0921, MEG0931, MEG0941, MEG1011, MEG1021, MEG1031, MEG1041, MEG1111, MEG1121, MEG1131, MEG1141, MEG1211, MEG1221, MEG1231, MEG1241, MEG1311, MEG1321, MEG1331, MEG1341, MEG1411, MEG1421, MEG1431, MEG1441, MEG1511, MEG1521, MEG1531, MEG1541, MEG1611, MEG1621, MEG1631, MEG1641, MEG1711, MEG1721, MEG1731, MEG1741, MEG1811, MEG1821, MEG1831, MEG1841, MEG1911, MEG1921, MEG1931, MEG1941, MEG2011, MEG2021, MEG2031, MEG2041, MEG2111, MEG2121, MEG2131, MEG2141, MEG2211, MEG2221, MEG2231, MEG2241, MEG2311, MEG2321, MEG2331, MEG2341, MEG2411, MEG2421, MEG2431, MEG2441, MEG2511, MEG2521, MEG2531, MEG2541, MEG2611, MEG2621, MEG2631, MEG2641">
                102
            </button>

        
        </td>
    </tr>

    
    <tr class="repr-element channels-cbff648c-c66e-48c9-8e9a-5865e807137e ">
        <td class="mne-repr-section-toggle"></td>
        <td>Gradiometers</td>
        <td>
            <button class="mne-ch-names-btn sd-sphinx-override sd-btn sd-btn-info sd-text-wrap sd-shadow-sm" onclick="alert('Good Gradiometers:\n\nMEG0113, MEG0112, MEG0122, MEG0123, MEG0132, MEG0133, MEG0143, MEG0142, MEG0213, MEG0212, MEG0222, MEG0223, MEG0232, MEG0233, MEG0243, MEG0242, MEG0313, MEG0312, MEG0322, MEG0323, MEG0333, MEG0332, MEG0343, MEG0342, MEG0413, MEG0412, MEG0422, MEG0423, MEG0432, MEG0433, MEG0443, MEG0442, MEG0513, MEG0512, MEG0523, MEG0522, MEG0532, MEG0533, MEG0542, MEG0543, MEG0613, MEG0612, MEG0622, MEG0623, MEG0633, MEG0632, MEG0642, MEG0643, MEG0713, MEG0712, MEG0723, MEG0722, MEG0733, MEG0732, MEG0743, MEG0742, MEG0813, MEG0812, MEG0822, MEG0823, MEG0913, MEG0912, MEG0923, MEG0922, MEG0932, MEG0933, MEG0942, MEG0943, MEG1013, MEG1012, MEG1023, MEG1022, MEG1032, MEG1033, MEG1043, MEG1042, MEG1112, MEG1113, MEG1123, MEG1122, MEG1133, MEG1132, MEG1142, MEG1143, MEG1213, MEG1212, MEG1223, MEG1222, MEG1232, MEG1233, MEG1243, MEG1242, MEG1312, MEG1313, MEG1323, MEG1322, MEG1333, MEG1332, MEG1342, MEG1343, MEG1412, MEG1413, MEG1423, MEG1422, MEG1433, MEG1432, MEG1442, MEG1443, MEG1512, MEG1513, MEG1522, MEG1523, MEG1533, MEG1532, MEG1543, MEG1542, MEG1613, MEG1612, MEG1622, MEG1623, MEG1632, MEG1633, MEG1643, MEG1642, MEG1713, MEG1712, MEG1722, MEG1723, MEG1732, MEG1733, MEG1743, MEG1742, MEG1813, MEG1812, MEG1822, MEG1823, MEG1832, MEG1833, MEG1843, MEG1842, MEG1912, MEG1913, MEG1923, MEG1922, MEG1932, MEG1933, MEG1943, MEG1942, MEG2013, MEG2012, MEG2023, MEG2022, MEG2032, MEG2033, MEG2042, MEG2043, MEG2113, MEG2112, MEG2122, MEG2123, MEG2133, MEG2132, MEG2143, MEG2142, MEG2212, MEG2213, MEG2223, MEG2222, MEG2233, MEG2232, MEG2242, MEG2243, MEG2312, MEG2313, MEG2323, MEG2322, MEG2332, MEG2333, MEG2343, MEG2342, MEG2412, MEG2413, MEG2423, MEG2422, MEG2433, MEG2432, MEG2442, MEG2443, MEG2512, MEG2513, MEG2522, MEG2523, MEG2533, MEG2532, MEG2543, MEG2542, MEG2612, MEG2613, MEG2623, MEG2622, MEG2633, MEG2632, MEG2642, MEG2643')" title="(Click to open in popup)&#13;&#13;MEG0113, MEG0112, MEG0122, MEG0123, MEG0132, MEG0133, MEG0143, MEG0142, MEG0213, MEG0212, MEG0222, MEG0223, MEG0232, MEG0233, MEG0243, MEG0242, MEG0313, MEG0312, MEG0322, MEG0323, MEG0333, MEG0332, MEG0343, MEG0342, MEG0413, MEG0412, MEG0422, MEG0423, MEG0432, MEG0433, MEG0443, MEG0442, MEG0513, MEG0512, MEG0523, MEG0522, MEG0532, MEG0533, MEG0542, MEG0543, MEG0613, MEG0612, MEG0622, MEG0623, MEG0633, MEG0632, MEG0642, MEG0643, MEG0713, MEG0712, MEG0723, MEG0722, MEG0733, MEG0732, MEG0743, MEG0742, MEG0813, MEG0812, MEG0822, MEG0823, MEG0913, MEG0912, MEG0923, MEG0922, MEG0932, MEG0933, MEG0942, MEG0943, MEG1013, MEG1012, MEG1023, MEG1022, MEG1032, MEG1033, MEG1043, MEG1042, MEG1112, MEG1113, MEG1123, MEG1122, MEG1133, MEG1132, MEG1142, MEG1143, MEG1213, MEG1212, MEG1223, MEG1222, MEG1232, MEG1233, MEG1243, MEG1242, MEG1312, MEG1313, MEG1323, MEG1322, MEG1333, MEG1332, MEG1342, MEG1343, MEG1412, MEG1413, MEG1423, MEG1422, MEG1433, MEG1432, MEG1442, MEG1443, MEG1512, MEG1513, MEG1522, MEG1523, MEG1533, MEG1532, MEG1543, MEG1542, MEG1613, MEG1612, MEG1622, MEG1623, MEG1632, MEG1633, MEG1643, MEG1642, MEG1713, MEG1712, MEG1722, MEG1723, MEG1732, MEG1733, MEG1743, MEG1742, MEG1813, MEG1812, MEG1822, MEG1823, MEG1832, MEG1833, MEG1843, MEG1842, MEG1912, MEG1913, MEG1923, MEG1922, MEG1932, MEG1933, MEG1943, MEG1942, MEG2013, MEG2012, MEG2023, MEG2022, MEG2032, MEG2033, MEG2042, MEG2043, MEG2113, MEG2112, MEG2122, MEG2123, MEG2133, MEG2132, MEG2143, MEG2142, MEG2212, MEG2213, MEG2223, MEG2222, MEG2233, MEG2232, MEG2242, MEG2243, MEG2312, MEG2313, MEG2323, MEG2322, MEG2332, MEG2333, MEG2343, MEG2342, MEG2412, MEG2413, MEG2423, MEG2422, MEG2433, MEG2432, MEG2442, MEG2443, MEG2512, MEG2513, MEG2522, MEG2523, MEG2533, MEG2532, MEG2543, MEG2542, MEG2612, MEG2613, MEG2623, MEG2622, MEG2633, MEG2632, MEG2642, MEG2643">
                204
            </button>

        
        </td>
    </tr>

    
    <tr class="repr-element channels-cbff648c-c66e-48c9-8e9a-5865e807137e ">
        <td class="mne-repr-section-toggle"></td>
        <td>EOG</td>
        <td>
            <button class="mne-ch-names-btn sd-sphinx-override sd-btn sd-btn-info sd-text-wrap sd-shadow-sm" onclick="alert('Good EOG:\n\nEOG061, EOG062')" title="(Click to open in popup)&#13;&#13;EOG061, EOG062">
                2
            </button>

        
        </td>
    </tr>

    
    <tr class="repr-element channels-cbff648c-c66e-48c9-8e9a-5865e807137e ">
        <td class="mne-repr-section-toggle"></td>
        <td>ECG</td>
        <td>
            <button class="mne-ch-names-btn sd-sphinx-override sd-btn sd-btn-info sd-text-wrap sd-shadow-sm" onclick="alert('Good ECG:\n\nECG063')" title="(Click to open in popup)&#13;&#13;ECG063">
                1
            </button>

        
        </td>
    </tr>

    
    <tr class="repr-element channels-cbff648c-c66e-48c9-8e9a-5865e807137e ">
        <td class="mne-repr-section-toggle"></td>
        <td>Stimulus</td>
        <td>
            <button class="mne-ch-names-btn sd-sphinx-override sd-btn sd-btn-info sd-text-wrap sd-shadow-sm" onclick="alert('Good Stimulus:\n\nSTI101, STI201, STI301')" title="(Click to open in popup)&#13;&#13;STI101, STI201, STI301">
                3
            </button>

        
        </td>
    </tr>


    <tr class="repr-element channels-cbff648c-c66e-48c9-8e9a-5865e807137e ">
        <td class="mne-repr-section-toggle"></td>
        <td>Head & sensor digitization</td>
    
        <td>137 points</td>
    
    </tr>
    







    <tr class="mne-repr-section-header filters-b31785c1-4f8b-4fe4-a1d3-4c762169e2d3"
         title="Hide section" 
        onclick="toggleVisibility('filters-b31785c1-4f8b-4fe4-a1d3-4c762169e2d3')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>Filters</strong>
        </th>
    </tr>


    <tr class="repr-element filters-b31785c1-4f8b-4fe4-a1d3-4c762169e2d3 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Highpass</td>
        <td>1.00 Hz</td>
    </tr>


    <tr class="repr-element filters-b31785c1-4f8b-4fe4-a1d3-4c762169e2d3 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Lowpass</td>
        <td>40.00 Hz</td>
    </tr>


    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 190-194

Each epoch corresponds to the presentation of an image, and the signal across the
sensors over time can be used as the neural representation of that image. Hence, one
could make a neural RDM, of for example the gradiometers in the time window 100 to 200
ms after stimulus onset, like this:

.. GENERATED FROM PYTHON SOURCE LINES 194-197

.. code-block:: Python


    neural_rdm = compute_rdm(epochs.copy().pick("grad").crop(0.1, 0.2).get_data())
    plot_rdms(neural_rdm)



.. image-sg:: /auto_examples/tutorials/images/sphx_glr_01_sensor_level_tutorial_004.png
   :alt: 01 sensor level tutorial
   :srcset: /auto_examples/tutorials/images/sphx_glr_01_sensor_level_tutorial_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 200x200 with 2 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 198-208

To compute RSA scores, we want to compare the resulting neural RDM with the RDMs we’ve
created earlier. However, if we inspect the neural RDM closely, we see that its rows
and column don’t line up with those of the previous RDMs. There are too many (879
vs. 450) and they are in the wrong order. Making sure that the RDMs match is an
important and sometimes tricky part of RSA.

To help us out, a useful feature of MNE-Python is that epochs have an associated
:attr:`mne.Epochs.metadata` field. This metadata is a :class:`pandas.DataFrame` where
each row contains information about the corresponding epoch. The epochs in this
tutorial come with some useful ``.metadata`` already:

.. GENERATED FROM PYTHON SOURCE LINES 208-210

.. code-block:: Python

    epochs.metadata






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>trigger</th>
          <th>file</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>13</td>
          <td>u032.bmp</td>
        </tr>
        <tr>
          <th>1</th>
          <td>14</td>
          <td>u032.bmp</td>
        </tr>
        <tr>
          <th>2</th>
          <td>13</td>
          <td>u088.bmp</td>
        </tr>
        <tr>
          <th>3</th>
          <td>13</td>
          <td>u084.bmp</td>
        </tr>
        <tr>
          <th>4</th>
          <td>5</td>
          <td>f123.bmp</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>882</th>
          <td>5</td>
          <td>f016.bmp</td>
        </tr>
        <tr>
          <th>883</th>
          <td>6</td>
          <td>f016.bmp</td>
        </tr>
        <tr>
          <th>884</th>
          <td>5</td>
          <td>f002.bmp</td>
        </tr>
        <tr>
          <th>885</th>
          <td>6</td>
          <td>f002.bmp</td>
        </tr>
        <tr>
          <th>886</th>
          <td>7</td>
          <td>f150.bmp</td>
        </tr>
      </tbody>
    </table>
    <p>879 rows × 2 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 211-225

While the trigger codes only indicate what type of stimulus was shown, the ``file``
column of the metadata tells us the exact image. Couple of challenges here: the
stimuli where shown in a random order, stimuli were repeated twice during the
experiment, and some epochs were dropped during preprocessing so not every image is
necessarily present twice in the ``epochs`` data. 😩

Luckily, MNE-RSA has a way to make our lives easier. Let’s take a look at the
:func:`mne_rsa.rdm_epochs` function, the Swiss army knife for computing RDMs from an
MNE-Python :class:`mne.Epochs` object.

In MNE-Python tradition, the function has a lot of parameters, but
all-but-one have a default so you only have to specify the ones that are
relevant to you. For example, to redo the neural RDM we created above,
we could do something like:

.. GENERATED FROM PYTHON SOURCE LINES 225-235

.. code-block:: Python


    from mne_rsa import rdm_epochs

    neural_rdm_gen = rdm_epochs(epochs, tmin=0.1, tmax=0.2)

    # `rdm_epochs` returns a generator of RDMs
    # unpacking the first (and only) RDM from the generator
    neural_rdm = next(neural_rdm_gen)
    plot_rdms(neural_rdm)




.. image-sg:: /auto_examples/tutorials/images/sphx_glr_01_sensor_level_tutorial_005.png
   :alt: 01 sensor level tutorial
   :srcset: /auto_examples/tutorials/images/sphx_glr_01_sensor_level_tutorial_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 200x200 with 2 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 236-269

Take note that :func:`mne_rsa.rdm_epochs` returns a `generator
<https://wiki.python.org/moin/Generators>`__ of RDMs. This is because one of the main
use-cases for MNE-RSA is to produce RDMs using sliding windows (in time and also in
space), which can produce a large amount of RDMs that can take up a lot of memory of
you’re not careful.

Alignment between model and data RDM ordering
---------------------------------------------

Looking at the neural RDM above, something is clearly different from the
one we made before. This one has 9 rows and columns. Closely inspecting
the docstring of :class:`mne_rsa.rdm_epochs` reveals that it is the ``labels``
parameter that is responsible for this:

::

  labels : list | None
      For each epoch, a label that identifies the item to which it corresponds.
      Multiple epochs may correspond to the same item, in which case they should have
      the same label and will either be averaged when computing the data RDM
      (``n_folds=1``) or used for cross-validation (``n_folds>1``). Labels may be of
      any python type that can be compared with ``==`` (int, float, string, tuple,
      etc). By default (``None``), the epochs event codes are used as labels.

Instead of producing one row per epoch, :func:`mne_rsa.rdm_epochs` produced one row
per event type, averaging across epochs of the same type before computing
dissimilarity. This is not quite what we want though. If we want to match
``pixel_rdm`` and ``facenet_rdm``, we want every single one of the 450 images to be
its own stimulus type. We can achieve this by setting the ``labels`` parameter of
:func:`mne_rsa.rdm_epochs` to a list that assigns each of the 879 epochs to a label
that indicates which image was shown. An image is identified by its filename, and the
``epochs.metadata.file`` column contains the filenames corresponding to the epochs,
so let's use that.

.. GENERATED FROM PYTHON SOURCE LINES 269-274

.. code-block:: Python


    neural_rdm = next(rdm_epochs(epochs, labels=epochs.metadata.file, tmin=0.1, tmax=0.2))

    # This plots your RDM
    plot_rdms(neural_rdm)



.. image-sg:: /auto_examples/tutorials/images/sphx_glr_01_sensor_level_tutorial_006.png
   :alt: 01 sensor level tutorial
   :srcset: /auto_examples/tutorials/images/sphx_glr_01_sensor_level_tutorial_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 200x200 with 2 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 275-278

The cell below will compure RSA between the neural RDM and the pixel and FaceNet RDMs
we created earlier. The RSA score will be the Spearman correlation between the RDMs,
which is the default metric used in the `original RSA paper <https://www.frontiersin.org/articles/10.3389/neuro.06.004.2008/full>`__.

.. GENERATED FROM PYTHON SOURCE LINES 278-287

.. code-block:: Python


    from mne_rsa import rsa

    rsa_pixel = rsa(neural_rdm, pixel_rdm, metric="spearman")
    rsa_facenet = rsa(neural_rdm, facenet_rdm, metric="spearman")

    print("RSA score between neural RDM and pixel RDM:", rsa_pixel)
    print("RSA score between neural RDM and FaceNet RDM:", rsa_facenet)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    RSA score between neural RDM and pixel RDM: 0.07869920694906636
    RSA score between neural RDM and FaceNet RDM: 0.07529582461337744




.. GENERATED FROM PYTHON SOURCE LINES 288-304

Slippin’ and slidin’ across time
--------------------------------

The neural representation of a stimulus is different across brain
regions and evolves over time. For example, we would expect that the
pixel RDM would be more similar to a neural RDM that we computed across
the visual cortex at an early time point, and that the FaceNET RDM might
be more similar to a neural RDM that we computed at a later time point.

For the remainder of this tutorial, we’ll restrict the ``epochs`` to
only contain the sensors over the left occipital cortex.

.. warning::
   Just because we select sensors over a certain brain region, does not mean the
   magnetic fields originate from that region. This is especially true for
   magnetometers. To make it a bit more accurate, we only select gradiometers.

.. GENERATED FROM PYTHON SOURCE LINES 304-309

.. code-block:: Python


    picks = mne.channels.read_vectorview_selection("Left-occipital")
    picks = ["".join(p.split(" ")) for p in picks]
    epochs.pick(picks).pick("grad").crop(-0.1, 1)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <script type="text/javascript">
        // must be `var` (not `const`) because this can get embedded multiple times on a page
    var toggleVisibility = (className) => {

        const elements = document.querySelectorAll(`.${className}`);

        elements.forEach(element => {
            if (element.classList.contains("mne-repr-section-header")) {
                return  // Don't collapse the section header row
            }
            element.classList.toggle("mne-repr-collapsed");
        });

        // trigger caret to rotate
        var sel = `.mne-repr-section-header.${className} > th.mne-repr-section-toggle > button`;
        const button = document.querySelector(sel);
        button.classList.toggle("collapsed");

        // adjust tooltip
        sel = `tr.mne-repr-section-header.${className}`;
        const secHeadRow = document.querySelector(sel);
        secHeadRow.classList.toggle("collapsed");
        secHeadRow.title = secHeadRow.title === "Hide section" ? "Show section" : "Hide section";
    }
    </script>

    <style type="text/css">
        /*
    Styles in this section apply both to the sphinx-built website docs and to notebooks
    rendered in an IDE or in Jupyter. In our web docs, styles here are complemented by
    doc/_static/styles.css and other CSS files (e.g. from the sphinx theme, sphinx-gallery,
    or bootstrap). In IDEs/Jupyter, those style files are unavailable, so only the rules in
    this file apply (plus whatever default styling the IDE applies).
    */
    .mne-repr-table {
        display: inline;  /* prevent using full container width */
    }
    .mne-repr-table tr.mne-repr-section-header > th {
        padding-top: 1rem;
        text-align: left;
        vertical-align: middle;
    }
    .mne-repr-section-toggle > button {
        all: unset;
        display: block;
        height: 1rem;
        width: 1rem;
    }
    .mne-repr-section-toggle > button > svg {
        height: 60%;
    }

    /* transition (rotation) effects on the collapser button */
    .mne-repr-section-toggle > button.collapsed > svg {
        transition: 0.1s ease-out;
        transform: rotate(-90deg);
    }
    .mne-repr-section-toggle > button:not(.collapsed) > svg {
        transition: 0.1s ease-out;
        transform: rotate(0deg);
    }

    /* hide collapsed table rows */
    .mne-repr-collapsed {
        display: none;
    }


    @layer {
        /*
        Selectors in a `@layer` will always be lower-precedence than selectors outside the
        layer. So even though e.g. `div.output_html` is present in the sphinx-rendered
        website docs, the styles here won't take effect there as long as some other rule
        somewhere in the page's CSS targets the same element.

        In IDEs or Jupyter notebooks, though, the CSS files from the sphinx theme,
        sphinx-gallery, and bootstrap are unavailable, so these styles will apply.

        Notes:

        - the selector `.accordion-body` is for MNE Reports
        - the selector `.output_html` is for VSCode's notebook interface
        - the selector `.jp-RenderedHTML` is for Jupyter notebook
        - variables starting with `--theme-` are VSCode-specific.
        - variables starting with `--jp-` are Jupyter styles, *some of which* are also
          available in VSCode. Here we try the `--theme-` variable first, then fall back to
          the `--jp-` ones.
        */
        .mne-repr-table {
            --mne-toggle-color: var(--theme-foreground, var(--jp-ui-font-color1));
            --mne-button-bg-color: var(--theme-button-background, var(--jp-info-color0, var(--jp-content-link-color)));
            --mne-button-fg-color: var(--theme-button-foreground, var(--jp-ui-inverse-font-color0, var(--jp-editor-background)));
            --mne-button-hover-bg-color: var(--theme-button-hover-background, var(--jp-info-color1));
            --mne-button-radius: var(--jp-border-radius, 0.25rem);
        }
        /* chevron position/alignment; in VSCode it looks ok without adjusting */
        .accordion-body .mne-repr-section-toggle > button,
        .jp-RenderedHTML .mne-repr-section-toggle > button {
            padding: 0 0 45% 25% !important;
        }
        /* chevron color; MNE Report doesn't have light/dark mode */
        div.output_html .mne-repr-section-toggle > button > svg > path,
        .jp-RenderedHTML .mne-repr-section-toggle > button > svg > path {
            fill: var(--mne-toggle-color);
        }
        .accordion-body .mne-ch-names-btn,
        div.output_html .mne-ch-names-btn,
        .jp-RenderedHTML .mne-ch-names-btn {
            -webkit-border-radius: var(--mne-button-radius);
            -moz-border-radius: var(--mne-button-radius);
            border-radius: var(--mne-button-radius);
            border: none;
            background-image: none;
            background-color: var(--mne-button-bg-color);
            color: var(--mne-button-fg-color);
            font-size: inherit;
            min-width: 1.5rem;
            padding: 0.25rem;
            text-align: center;
            text-decoration: none;
        }
        .accordion-body .mne-ch-names-btn:hover,
        div.output_html .mne.ch-names-btn:hover,
        .jp-RenderedHTML .mne-ch-names-btn:hover {
            background-color: var(--mne-button-hover-bg-color);
            text-decoration: underline;
        }
        .accordion-body .mne-ch-names-btn:focus-visible,
        div.output_html .mne-ch-names-btn:focus-visible,
        .jp-RenderedHTML .mne-ch-names-btn:focus-visible {
            outline: 0.1875rem solid var(--mne-button-bg-color) !important;
            outline-offset: 0.1875rem !important;
        }
    }
    </style>



    <table class="table mne-repr-table">
    







    <tr class="mne-repr-section-header general-7a14a57b-1da4-40bb-9abd-11df2fedcf1f"
         title="Hide section" 
        onclick="toggleVisibility('general-7a14a57b-1da4-40bb-9abd-11df2fedcf1f')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>General</strong>
        </th>
    </tr>


    <tr class="repr-element general-7a14a57b-1da4-40bb-9abd-11df2fedcf1f ">
        <td class="mne-repr-section-toggle"></td>
        <td>Filename(s)</td>
        <td>
        
            sub-02-epo.fif
        
        
        </td>
    </tr>

    <tr class="repr-element general-7a14a57b-1da4-40bb-9abd-11df2fedcf1f ">
        <td class="mne-repr-section-toggle"></td>
        <td>MNE object type</td>
        <td>EpochsFIF</td>
    </tr>
    <tr class="repr-element general-7a14a57b-1da4-40bb-9abd-11df2fedcf1f ">
        <td class="mne-repr-section-toggle"></td>
        <td>Measurement date</td>
    
        <td>2009-04-09 at 11:04:14 UTC</td>
    
    </tr>
    <tr class="repr-element general-7a14a57b-1da4-40bb-9abd-11df2fedcf1f ">
        <td class="mne-repr-section-toggle"></td>
        <td>Participant</td>
    
    
    
    </tr>
    <tr class="repr-element general-7a14a57b-1da4-40bb-9abd-11df2fedcf1f ">
        <td class="mne-repr-section-toggle"></td>
        <td>Experimenter</td>
    
        <td>MEG</td>
    
    </tr>
    







    <tr class="mne-repr-section-header acquisition-4d68f1e8-cfe9-47d1-9903-1d73e49a7110"
         title="Hide section" 
        onclick="toggleVisibility('acquisition-4d68f1e8-cfe9-47d1-9903-1d73e49a7110')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>Acquisition</strong>
        </th>
    </tr>





    <tr class="repr-element acquisition-4d68f1e8-cfe9-47d1-9903-1d73e49a7110 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Total number of events</td>
        <td>879</td>
    </tr>


    <tr class="repr-element acquisition-4d68f1e8-cfe9-47d1-9903-1d73e49a7110 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Events counts</td>
    
        <td>
        
            face/famous/first: 147
            <br />
        
            face/famous/immediate: 78
            <br />
        
            face/famous/long: 66
            <br />
        
            face/unfamiliar/first: 149
            <br />
        
            face/unfamiliar/immediate: 65
            <br />
        
            face/unfamiliar/long: 79
            <br />
        
            scrambled/first: 150
            <br />
        
            scrambled/immediate: 71
            <br />
        
            scrambled/long: 74
        
        
        </td>
    
    </tr>


    <tr class="repr-element acquisition-4d68f1e8-cfe9-47d1-9903-1d73e49a7110 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Time range</td>
        <td>-0.100 – 1.000 s</td>
    </tr>


    <tr class="repr-element acquisition-4d68f1e8-cfe9-47d1-9903-1d73e49a7110 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Baseline</td>
        <td>-0.200 – 0.000 s</td>
    </tr>


    <tr class="repr-element acquisition-4d68f1e8-cfe9-47d1-9903-1d73e49a7110 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Sampling frequency</td>
        <td>220.00 Hz</td>
    </tr>


    <tr class="repr-element acquisition-4d68f1e8-cfe9-47d1-9903-1d73e49a7110 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Time points</td>
        <td>243</td>
    </tr>


    <tr class="repr-element acquisition-4d68f1e8-cfe9-47d1-9903-1d73e49a7110 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Metadata</td>
        <td>879 rows × 2 columns</td>
    </tr>

    







    <tr class="mne-repr-section-header channels-43265bc0-a4c5-426b-947f-ec5683b08c2d"
         title="Hide section" 
        onclick="toggleVisibility('channels-43265bc0-a4c5-426b-947f-ec5683b08c2d')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>Channels</strong>
        </th>
    </tr>


    
    <tr class="repr-element channels-43265bc0-a4c5-426b-947f-ec5683b08c2d ">
        <td class="mne-repr-section-toggle"></td>
        <td>Gradiometers</td>
        <td>
            <button class="mne-ch-names-btn sd-sphinx-override sd-btn sd-btn-info sd-text-wrap sd-shadow-sm" onclick="alert('Good Gradiometers:\n\nMEG1642, MEG1643, MEG1712, MEG1713, MEG1722, MEG1723, MEG1732, MEG1733, MEG1742, MEG1743, MEG1912, MEG1913, MEG1922, MEG1923, MEG1932, MEG1933, MEG1942, MEG1943, MEG2042, MEG2043, MEG2112, MEG2113, MEG2142, MEG2143')" title="(Click to open in popup)&#13;&#13;MEG1642, MEG1643, MEG1712, MEG1713, MEG1722, MEG1723, MEG1732, MEG1733, MEG1742, MEG1743, MEG1912, MEG1913, MEG1922, MEG1923, MEG1932, MEG1933, MEG1942, MEG1943, MEG2042, MEG2043, MEG2112, MEG2113, MEG2142, MEG2143">
                24
            </button>

        
        </td>
    </tr>


    <tr class="repr-element channels-43265bc0-a4c5-426b-947f-ec5683b08c2d ">
        <td class="mne-repr-section-toggle"></td>
        <td>Head & sensor digitization</td>
    
        <td>137 points</td>
    
    </tr>
    







    <tr class="mne-repr-section-header filters-17e656ab-9420-4cb0-8141-aa62ae064eb0"
         title="Hide section" 
        onclick="toggleVisibility('filters-17e656ab-9420-4cb0-8141-aa62ae064eb0')">
        <th class="mne-repr-section-toggle">
            <button >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
        </th>
        <th colspan="2">
            <strong>Filters</strong>
        </th>
    </tr>


    <tr class="repr-element filters-17e656ab-9420-4cb0-8141-aa62ae064eb0 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Highpass</td>
        <td>1.00 Hz</td>
    </tr>


    <tr class="repr-element filters-17e656ab-9420-4cb0-8141-aa62ae064eb0 ">
        <td class="mne-repr-section-toggle"></td>
        <td>Lowpass</td>
        <td>40.00 Hz</td>
    </tr>


    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 310-314

In the cell below, we use :func:`mne_rsa.rdm_epochs` to compute RDMs using a sliding
window by setting the ``temporal_radius`` parameter to ``0.1`` seconds. We use the
entire time range (``tmin=None`` and ``tmax=None``) and leave the result as a
generator (so no ``next()`` calls).

.. GENERATED FROM PYTHON SOURCE LINES 314-317

.. code-block:: Python


    neural_rdms_gen = rdm_epochs(epochs, labels=epochs.metadata.file, temporal_radius=0.1)








.. GENERATED FROM PYTHON SOURCE LINES 318-320

And now we can consume the generator (with a nice progress bar) and plot
a few of the generated RDMs:

.. GENERATED FROM PYTHON SOURCE LINES 320-327

.. code-block:: Python


    from tqdm import tqdm

    times = epochs.times[(epochs.times >= 0) & (epochs.times <= 0.9)]
    neural_rdms_list = list(tqdm(neural_rdms_gen, total=len(times)))
    plot_rdms(neural_rdms_list[::10], names=[f"t={t:.2f}" for t in times[::10]])




.. image-sg:: /auto_examples/tutorials/images/sphx_glr_01_sensor_level_tutorial_007.png
   :alt: t=0.00, t=0.05, t=0.09, t=0.14, t=0.18, t=0.23, t=0.27, t=0.32, t=0.36, t=0.41, t=0.45, t=0.50, t=0.55, t=0.59, t=0.64, t=0.68, t=0.73, t=0.77, t=0.82, t=0.86
   :srcset: /auto_examples/tutorials/images/sphx_glr_01_sensor_level_tutorial_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/199 [00:00<?, ?it/s]      1%|          | 1/199 [00:00<00:23,  8.36it/s]      2%|▏         | 3/199 [00:00<00:13, 14.25it/s]      3%|▎         | 5/199 [00:00<00:11, 16.47it/s]      4%|▎         | 7/199 [00:00<00:10, 17.56it/s]      5%|▍         | 9/199 [00:00<00:10, 18.18it/s]      6%|▌         | 11/199 [00:00<00:10, 18.57it/s]      7%|▋         | 13/199 [00:00<00:09, 18.82it/s]      8%|▊         | 15/199 [00:00<00:09, 18.99it/s]      9%|▊         | 17/199 [00:00<00:09, 19.12it/s]     10%|▉         | 19/199 [00:01<00:09, 19.22it/s]     11%|█         | 21/199 [00:01<00:09, 19.27it/s]     12%|█▏        | 23/199 [00:01<00:09, 19.22it/s]     13%|█▎        | 25/199 [00:01<00:09, 19.26it/s]     14%|█▎        | 27/199 [00:01<00:08, 19.31it/s]     15%|█▍        | 29/199 [00:01<00:08, 19.32it/s]     16%|█▌        | 31/199 [00:01<00:08, 19.34it/s]     17%|█▋        | 33/199 [00:01<00:08, 19.35it/s]     18%|█▊        | 35/199 [00:01<00:08, 19.36it/s]     19%|█▊        | 37/199 [00:01<00:08, 19.38it/s]     20%|█▉        | 39/199 [00:02<00:08, 19.39it/s]     21%|██        | 41/199 [00:02<00:08, 19.37it/s]     22%|██▏       | 43/199 [00:02<00:08, 19.36it/s]     23%|██▎       | 45/199 [00:02<00:07, 19.36it/s]     24%|██▎       | 47/199 [00:02<00:07, 19.37it/s]     25%|██▍       | 49/199 [00:02<00:07, 19.38it/s]     26%|██▌       | 51/199 [00:02<00:07, 19.39it/s]     27%|██▋       | 53/199 [00:02<00:07, 19.39it/s]     28%|██▊       | 55/199 [00:02<00:07, 19.36it/s]     29%|██▊       | 57/199 [00:03<00:07, 19.37it/s]     30%|██▉       | 59/199 [00:03<00:07, 19.36it/s]     31%|███       | 61/199 [00:03<00:07, 19.36it/s]     32%|███▏      | 63/199 [00:03<00:07, 19.32it/s]     33%|███▎      | 65/199 [00:03<00:06, 19.31it/s]     34%|███▎      | 67/199 [00:03<00:06, 19.31it/s]     35%|███▍      | 69/199 [00:03<00:06, 19.31it/s]     36%|███▌      | 71/199 [00:03<00:06, 19.33it/s]     37%|███▋      | 73/199 [00:03<00:06, 19.34it/s]     38%|███▊      | 75/199 [00:03<00:06, 19.34it/s]     39%|███▊      | 77/199 [00:04<00:06, 19.35it/s]     40%|███▉      | 79/199 [00:04<00:06, 19.34it/s]     41%|████      | 81/199 [00:04<00:06, 19.28it/s]     42%|████▏     | 83/199 [00:04<00:06, 19.29it/s]     43%|████▎     | 85/199 [00:04<00:05, 19.33it/s]     44%|████▎     | 87/199 [00:04<00:05, 19.34it/s]     45%|████▍     | 89/199 [00:04<00:05, 19.34it/s]     46%|████▌     | 91/199 [00:04<00:05, 19.30it/s]     47%|████▋     | 93/199 [00:04<00:05, 19.30it/s]     48%|████▊     | 95/199 [00:04<00:05, 19.29it/s]     49%|████▊     | 97/199 [00:05<00:05, 19.30it/s]     50%|████▉     | 99/199 [00:05<00:05, 19.31it/s]     51%|█████     | 101/199 [00:05<00:05, 19.28it/s]     52%|█████▏    | 103/199 [00:05<00:04, 19.26it/s]     53%|█████▎    | 105/199 [00:05<00:04, 19.26it/s]     54%|█████▍    | 107/199 [00:05<00:04, 19.25it/s]     55%|█████▍    | 109/199 [00:05<00:04, 19.28it/s]     56%|█████▌    | 111/199 [00:05<00:04, 19.27it/s]     57%|█████▋    | 113/199 [00:05<00:04, 19.28it/s]     58%|█████▊    | 115/199 [00:06<00:04, 19.29it/s]     59%|█████▉    | 117/199 [00:06<00:04, 19.30it/s]     60%|█████▉    | 119/199 [00:06<00:04, 19.32it/s]     61%|██████    | 121/199 [00:06<00:04, 19.31it/s]     62%|██████▏   | 123/199 [00:06<00:03, 19.29it/s]     63%|██████▎   | 125/199 [00:06<00:03, 19.30it/s]     64%|██████▍   | 127/199 [00:06<00:03, 19.30it/s]     65%|██████▍   | 129/199 [00:06<00:03, 19.33it/s]     66%|██████▌   | 131/199 [00:06<00:03, 19.32it/s]     67%|██████▋   | 133/199 [00:06<00:03, 19.32it/s]     68%|██████▊   | 135/199 [00:07<00:03, 19.34it/s]     69%|██████▉   | 137/199 [00:07<00:03, 19.33it/s]     70%|██████▉   | 139/199 [00:07<00:03, 19.32it/s]     71%|███████   | 141/199 [00:07<00:03, 19.30it/s]     72%|███████▏  | 143/199 [00:07<00:02, 19.30it/s]     73%|███████▎  | 145/199 [00:07<00:02, 19.31it/s]     74%|███████▍  | 147/199 [00:07<00:02, 19.31it/s]     75%|███████▍  | 149/199 [00:07<00:02, 19.30it/s]     76%|███████▌  | 151/199 [00:07<00:02, 19.31it/s]     77%|███████▋  | 153/199 [00:07<00:02, 19.31it/s]     78%|███████▊  | 155/199 [00:08<00:02, 19.32it/s]     79%|███████▉  | 157/199 [00:08<00:02, 19.32it/s]     80%|███████▉  | 159/199 [00:08<00:02, 19.29it/s]     81%|████████  | 161/199 [00:08<00:01, 19.29it/s]     82%|████████▏ | 163/199 [00:08<00:01, 19.31it/s]     83%|████████▎ | 165/199 [00:08<00:01, 19.29it/s]     84%|████████▍ | 167/199 [00:08<00:01, 19.30it/s]     85%|████████▍ | 169/199 [00:08<00:01, 19.32it/s]     86%|████████▌ | 171/199 [00:08<00:01, 19.33it/s]     87%|████████▋ | 173/199 [00:09<00:01, 19.33it/s]     88%|████████▊ | 175/199 [00:09<00:01, 19.34it/s]     89%|████████▉ | 177/199 [00:09<00:01, 19.34it/s]     90%|████████▉ | 179/199 [00:09<00:01, 19.30it/s]     91%|█████████ | 181/199 [00:09<00:00, 19.31it/s]     92%|█████████▏| 183/199 [00:09<00:00, 19.33it/s]     93%|█████████▎| 185/199 [00:09<00:00, 19.34it/s]     94%|█████████▍| 187/199 [00:09<00:00, 19.34it/s]     95%|█████████▍| 189/199 [00:09<00:00, 19.32it/s]     96%|█████████▌| 191/199 [00:09<00:00, 19.32it/s]     97%|█████████▋| 193/199 [00:10<00:00, 19.33it/s]     98%|█████████▊| 195/199 [00:10<00:00, 19.33it/s]     99%|█████████▉| 197/199 [00:10<00:00, 19.32it/s]    100%|██████████| 199/199 [00:10<00:00, 19.29it/s]    100%|██████████| 199/199 [00:10<00:00, 19.19it/s]

    <Figure size 4000x200 with 21 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 328-348

Putting it altogether for sensor-level RSA
------------------------------------------

Now all that is left to do is compute RSA scored between the neural RDMs you’ve just
created and the pixel and FaceNet RDMs. We could do this using the
:func:`mne_rsa.rsa_gen` function, but I’d rather directly show you the
:func:`mne_rsa.rsa_epochs` function that combines computing the neural RDMs with
computing the RSA scores.

The signature of :func:`mne_rsa.rsa_epochs` is very similar to that of
:func:`mne_rsa.rdm_epochs` The main difference is that we also give it the “model”
RDMs, in our case the pixel and FaceNet RDMs. We can also specify ``labels_rdm_model``
to indicate which rows of the model RDMs correspond to which images to make sure the
ordering is the same. :func:`mne_rsa.rsa_epochs` will return the RSA scores as a list
of :class:`mne.Evoked` objects: one for each model RDM we gave it.

We compute the RSA scores for ``epochs`` against ``[pixel_rdm, facenet_rdm]`` and do
this in a sliding windows across time, with a temporal radius of 0.1 seconds. Setting
``verbose=True`` will activate a progress bar. We can optionally set ``n_jobs=-1`` to
use multiple CPU cores to speed things up.

.. GENERATED FROM PYTHON SOURCE LINES 348-368

.. code-block:: Python


    from mne_rsa import rsa_epochs

    ev_rsa = rsa_epochs(
        epochs,
        [pixel_rdm, facenet_rdm],
        labels_epochs=epochs.metadata.file,
        labels_rdm_model=filenames,
        temporal_radius=0.1,
        verbose=True,
        n_jobs=-1,
    )

    # Create a nice plot of the result
    ev_rsa[0].comment = "pixels"
    ev_rsa[1].comment = "facenet"
    mne.viz.plot_compare_evokeds(
        ev_rsa, picks=[0], ylim=dict(misc=[-0.02, 0.2]), show_sensors=False
    )




.. image-sg:: /auto_examples/tutorials/images/sphx_glr_01_sensor_level_tutorial_008.png
   :alt: rsa
   :srcset: /auto_examples/tutorials/images/sphx_glr_01_sensor_level_tutorial_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/199 [00:00<?, ?patch/s]      4%|▍         | 8/199 [00:02<01:07,  2.81patch/s]      6%|▌         | 12/199 [00:02<00:41,  4.49patch/s]     10%|█         | 20/199 [00:03<00:20,  8.88patch/s]     14%|█▍        | 28/199 [00:03<00:12, 13.82patch/s]     18%|█▊        | 36/199 [00:03<00:08, 19.01patch/s]     26%|██▌       | 52/199 [00:03<00:04, 30.53patch/s]     30%|███       | 60/199 [00:03<00:04, 34.51patch/s]     34%|███▍      | 68/199 [00:04<00:03, 38.21patch/s]     38%|███▊      | 76/199 [00:04<00:03, 37.16patch/s]     42%|████▏     | 84/199 [00:04<00:02, 40.37patch/s]     46%|████▌     | 92/199 [00:04<00:02, 43.37patch/s]     50%|█████     | 100/199 [00:04<00:02, 45.64patch/s]     54%|█████▍    | 108/199 [00:04<00:01, 47.50patch/s]     58%|█████▊    | 116/199 [00:05<00:01, 48.80patch/s]     62%|██████▏   | 124/199 [00:05<00:01, 49.99patch/s]     66%|██████▋   | 132/199 [00:05<00:01, 44.43patch/s]     70%|███████   | 140/199 [00:05<00:01, 46.51patch/s]     74%|███████▍  | 148/199 [00:05<00:01, 47.93patch/s]     78%|███████▊  | 156/199 [00:05<00:00, 48.87patch/s]     82%|████████▏ | 164/199 [00:06<00:00, 50.39patch/s]     86%|████████▋ | 172/199 [00:06<00:00, 51.15patch/s]     90%|█████████ | 180/199 [00:06<00:00, 50.53patch/s]     94%|█████████▍| 188/199 [00:06<00:00, 44.90patch/s]     98%|█████████▊| 196/199 [00:06<00:00, 47.19patch/s]    100%|██████████| 199/199 [00:06<00:00, 29.72patch/s]

    [<Figure size 800x600 with 1 Axes>]



.. GENERATED FROM PYTHON SOURCE LINES 369-377

We see that first, the “pixels” representation is the better match to the
representation in the brain, but after around 150 ms the representation produced by
the FaceNet model matches better. The best match between the brain and FaceNet is
found at around 250 ms.

If you’ve made it this far, you have successfully completed your first sensor-level
RSA! 🎉 This is the end of this tutorial. I invite you to join me in the next
tutorial where we will do source level RSA: :ref:`tut-source-level`


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 56.843 seconds)


.. _sphx_glr_download_auto_examples_tutorials_01_sensor_level_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 01_sensor_level_tutorial.ipynb <01_sensor_level_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 01_sensor_level_tutorial.py <01_sensor_level_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 01_sensor_level_tutorial.zip <01_sensor_level_tutorial.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
